package cortana.core;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Arrays;
import java.util.stream.Collectors;

import cortana.command.AddCommand;
import cortana.command.Command;
import cortana.command.CommandType;
import cortana.command.DeleteCommand;
import cortana.command.ExitCommand;
import cortana.command.FindCommand;
import cortana.command.ListCommand;
import cortana.command.MarkCommand;
import cortana.command.UnMarkCommand;
import cortana.exception.CortanaException;

/**
 * Parses user input strings and converts them into cortana.command.Command objects.
 */
public class Parser {

    /**
     * Parses the full user input into a cortana.command.Command object.
     *
     * @param fullCommand The raw input string from the user.
     * @return The cortana.command.Command object representing the user input.
     * @throws CortanaException if the input is invalid or cannot be parsed.
     */
    public static Command parse(String fullCommand) throws CortanaException {
        // Split input by '/' to separate command and parameters
        String[] splitBySlash = fullCommand.split("/");

        // Split the first part by spaces to get the command and first argument
        String[] firstTokenSplit = splitBySlash[0].trim().split(" ");
        CommandType commandType = CommandType.fromString(firstTokenSplit[0]);

        try {
            switch (commandType) {
            case TODO:
                return parseToDoCommand(firstTokenSplit, fullCommand);

            case DEADLINE:
                return parseDeadlineCommand(firstTokenSplit, splitBySlash);

            case EVENT:
                return parseEventCommand(firstTokenSplit, splitBySlash);

            case MARK:
                return parseMarkCommand(firstTokenSplit);

            case UNMARK:
                return parseUnMarkCommand(firstTokenSplit);

            case DELETE:
                return parseDeleteCommand(firstTokenSplit);

            case FIND:
                return parseFindCommand(firstTokenSplit);

            case LIST:
                return new ListCommand();

            case BYE:
                return new ExitCommand();

            default:
                throw new CortanaException("I don't understand the command.");
            }
        } catch (NumberFormatException e) { // Catch the case when parseInt processes non-digits
            throw new CortanaException("Invalid number format.");
        }
    }

    /**
     * Parses a date string into a LocalDateTime object. Supports multiple date formats.
     *
     * @param dateString The string representing the date/time.
     * @return A LocalDateTime object parsed from the string.
     * @throws CortanaException if the string cannot be parsed into a valid date.
     */
    public static LocalDateTime parseDate(String dateString) throws CortanaException {
        DateTimeFormatter formatter1 = DateTimeFormatter.ofPattern("d M yy HHmm");
        DateTimeFormatter formatter2 = DateTimeFormatter.ofPattern("d MMM yy HHmm");
        try {
            return LocalDateTime.parse(dateString, formatter1);
        } catch (DateTimeParseException e) {
            try {
                return LocalDateTime.parse(dateString, formatter2);
            } catch (DateTimeParseException ex) {
                throw new CortanaException("Invalid date format. Use d M yy HHmm or d MMM yy HHmm");
            }
        }
    }

    /**
     * Parses the task name from the firstTokenSplit.
     * Combines all the tokens after the command into a single string.
     * Reused code generated by Perplexity AI, with minor modifications.
     * @author KieronOei-reused
     * @param firstTokenSplit
     * @return The parsed task name.
     */
    private static String parseName(String[] firstTokenSplit) {
        return Arrays.stream(firstTokenSplit, 1, firstTokenSplit.length)
                .collect(Collectors.joining(" "));
    }

    /**
     * Parses the TODO command and constructs an AddCommand.
     *
     * @param firstTokenSplit The split tokens of the command input.
     * @param fullCommand The original full input string.
     * @return An AddCommand representing the todo task.
     * @throws CortanaException if the task name is missing.
     */
    private static Command parseToDoCommand(String[] firstTokenSplit, String fullCommand) throws CortanaException {
        if (firstTokenSplit.length < 2) {
            throw new CortanaException("Specify task name");
        }
        String todoName = parseName(firstTokenSplit);
        return new AddCommand(todoName);
    }

    /**
     * Parses the DEADLINE command and constructs an AddCommand with deadline.
     *
     * @param firstTokenSplit The split tokens of the command input.
     * @param splitBySlash The input split by '/' characters.
     * @return An AddCommand representing the deadline task.
     * @throws CortanaException if the task name or deadline is missing or malformed.
     */
    private static Command parseDeadlineCommand(String[] firstTokenSplit, String[] splitBySlash)
            throws CortanaException {
        if (firstTokenSplit.length < 2 || splitBySlash.length < 2) {
            throw new CortanaException("Specify task name and deadline with /by");
        }
        String deadlineName = parseName(firstTokenSplit);
        LocalDateTime deadlineDate = parseDate(splitBySlash[1].trim().substring(3));
        return new AddCommand(deadlineName, deadlineDate);
    }

    /**
     * Parses the EVENT command and constructs an AddCommand with from and to dates.
     *
     * @param firstTokenSplit The split tokens of the command input.
     * @param splitBySlash The input split by '/' characters.
     * @return An AddCommand representing the event task.
     * @throws CortanaException if the task name or dates are missing or malformed.
     */
    private static Command parseEventCommand(String[] firstTokenSplit, String[] splitBySlash) throws CortanaException {
        if (firstTokenSplit.length < 2 || splitBySlash.length < 3) {
            throw new CortanaException("Specify task name and /from and /to times");
        }
        String eventName = parseName(firstTokenSplit);
        LocalDateTime fromDate = parseDate(splitBySlash[1].trim().substring(5));
        LocalDateTime toDate = parseDate(splitBySlash[2].trim().substring(3));
        return new AddCommand(eventName, fromDate, toDate);
    }

    /**
     * Parses the MARK command and constructs a MarkCommand.
     *
     * @param firstTokenSplit The split tokens of the command input.
     * @return A MarkCommand indicating which task to mark.
     * @throws CortanaException if the task number is missing or invalid.
     */
    private static Command parseMarkCommand(String[] firstTokenSplit) throws CortanaException {
        if (firstTokenSplit.length < 2) {
            throw new CortanaException("Specify task number to mark");
        }
        int maskNumber = Integer.parseInt(firstTokenSplit[1]);
        return new MarkCommand(maskNumber);
    }

    /**
     * Parses the UNMARK command and constructs an UnMarkCommand.
     *
     * @param firstTokenSplit The split tokens of the command input.
     * @return An UnMarkCommand indicating which task to unmark.
     * @throws CortanaException if the task number is missing or invalid.
     */
    private static Command parseUnMarkCommand(String[] firstTokenSplit) throws CortanaException {
        if (firstTokenSplit.length < 2) {
            throw new CortanaException("Specify task number to unmark");
        }
        int unMaskNumber = Integer.parseInt(firstTokenSplit[1]);
        return new UnMarkCommand(unMaskNumber);
    }

    /**
     * Parses the DELETE command and constructs a DeleteCommand.
     *
     * @param firstTokenSplit The split tokens of the command input.
     * @return A DeleteCommand indicating which task to delete.
     * @throws CortanaException if the task number is missing or invalid.
     */
    private static Command parseDeleteCommand(String[] firstTokenSplit) throws CortanaException {
        if (firstTokenSplit.length < 2) {
            throw new CortanaException("Specify task number to delete");
        }
        int deleteIndex = Integer.parseInt(firstTokenSplit[1]);
        return new DeleteCommand(deleteIndex);
    }

    /**
     * Parses the FIND command and constructs a FindCommand.
     *
     * @param firstTokenSplit The split tokens of the command input.
     * @return A FindCommand with the keywords to search.
     * @throws CortanaException if no keyword is specified.
     */
    private static Command parseFindCommand(String[] firstTokenSplit) throws CortanaException {
        if (firstTokenSplit.length < 2) {
            throw new CortanaException("Specify keyword to find");
        }
        String[] keywords = Arrays.copyOfRange(firstTokenSplit, 1, firstTokenSplit.length);
        return new FindCommand(keywords);
    }
}
